Example 1: 'eat hotdog'

// An item is described as a name, followed by '{}', which contains its
// definition.
room {
  // '*' indicates the starting state. 'default' is the name of the state. 'a
  // normal room' is the description of the state.
  *default: 'a normal room';
};
// '>' indicates ownership, meaning 'hotdog' is a child of 'room'.
room > hotdog {
  // '[]' contains the state's transitions. 'eat' is the name of a transition.
  // '$ was eaten' is the description of the transition, where '$' represents
  // the current item ('hotdog' in this case). '->' represents the actual
  // transition to the next state. In this example, 'halfeaten' is the next
  // state. The final '[]' contains the transition's effects. Effects are
  // represented as actions in the form 'subject verb direct object'. '$actor'
  // refers to the actor executing the transition, which, in this example,
  // would be 'player'.
  *full: 'a normal hotdog' [eat: 'hotdog was eaten' -> halfeaten [hotdog fill $actor]];
  halfeaten: 'a halfeaten hotdog';
};
// The '*' before 'player' indicates that this is the default subject of user
// actions.
room > *player {
  // An '_' before a transition name indicates it is protected. This means that
  // the 'fill' transition cannot be directly executed by the player, and must
  // instead be executed as an effect of another transition.
  *hungry: 'a hungry hungry hippo' [_fill: 'mmm, delicious!' -> full];
  full: 'a full belly';
};

Example 2: 'flip lightswitch'
room {
  // '()' represents a query. // TODO(hiram): describe more
  *dark: 'a dark room' [_enlighten: 'the room lights up!' -> lit [room blind (hasParent, room)]];
  lit: 'a nicely lit room' [_endarken: 'the room becomes dark' -> dark];
};
room > *player {
  *default: 'a normal dude' [_blind: 'the player becomes blind!' -> blinded];
  blinded: 'a normal blind dude';
};
room > dog {
  *default: 'a normal dog' [_blind: 'the dog becomes blind!' -> blinded];
  blinded: 'a normal blind dog';
};
room > lightswitch {
  *off: "a lightswitch in the 'off' position" [flip: 'the lightswitch was flipped' -> on [lightswitch enlighten room]];
  on:  "a lightswitch in the 'on' position" [flip: 'the lightswitch was flipped' -> off [lightswitch endarken room]];
};

Example 3: 'take bird', 'drop bird'
// Assign a common transition to a variable in JS.
// Omitting the '-> next_state' part of a transition simply implies the next
// state is the current state. TODO(hiram): describe more
room {
  *default: 'a nice room' [_go: '$actor was moved to the room' [room > $actor]];
};
room > bird {
  *default: 'a beautiful bluejay';
};
room > *player {
  *default: 'a normal dude' [_go: '$actor was moved to the player' [player > $actor]];
};

Example 4: 'go through door'
blue_room {
  *default: 'a blue room';
};
blue_room > door {
  *open: 'an open door' [go: '$actor went through the door' [green_room > $actor]];
};
green_room {
  *default: 'a green room';
};
green_room > door {
  *open: 'an open door' [go: '$actor went through the door' [blue_room > $actor]];
};
blue_room > *player {
  *default: 'a normal dude';
};

Example 5: 'cook hamburger'
room {
  *default: 'a room';
};
room > *player {
  *default: 'a normal dude';
};
ash {
  *default: 'a sad pile of ashes';
};
room > hamburger {
  // TODO(hiram): explain
  *cooked: 'a cooked hamburger' [cook: 'the hamburger burned!' [ > hamburger, room > ash ]];
};

Possible further examples: 'scream'