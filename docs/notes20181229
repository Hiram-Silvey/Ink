
State:
  String description // 'A dark room with little visibility.'
  Map transitions // { 'open' : Transition open, 'close' : Transition close }

Item:
  String name
  State current_state
  Set inventory // All items are unique; duplicates have separate IDs.
  Item parent // The item that contains this item.

Effect (interface):
  Boolean protected // If true, this effect cannot be directly initiated by
                    // the player.
  Fn Execute(Item actor) // What is doing it.

Transition (extend Effect):
  String description // 'The light turns on.'
  State next_state
  List effects // List of Effects to apply after transitioning.
  Fn Execute(Item actor) // What is causing the transition.

Move (extend Effect):
  Item destination // To where the item will be moved.
  Fn Execute(Item actor) // Item to move. Item has a reference to its parent,
                      // so it can be easily removed from that inventory.

Remove (extend Effect):
  Item item // Item to remove from play. Item has a reference to its parent, 
            // so it can be easily removed from that inventory. It will be
            // moved to the top level and have no parent.
  Fn Execute(Item actor) // What is destroying the item.

Actions are not explicitely a class, but exist as a concept and will live in
function logic. Actions have an actor, verb, and direct object. For example,
moving a bird into the player's inventory would have the action:
  actor: Query for 'bird'
  verb: 'go'
  direct object: Query for 'player'
The actor and direct object fields of an action are queries, which allow for
flexibility and runtime validation. As the universe is a series of state
machines, the engine moves forward in 'steps.' A single step of the engine is
roughly as follows:
Step 1. Parse text into action.
Step 2. Resolve action queries.
Step 3. Validate action fields and map action to a specific transition.
Step 4. Execute transition.
Step 5. Execute transition effects in a breadth first manner. (Possible future
research in having effect priority and executing based on a priority queue.)